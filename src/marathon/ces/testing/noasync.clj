(ns marathon.ces.testing.noasync
  (:require [marathon.ces [engine   :as engine  :refer :all]]
            [marathon.ces [fill     :as fill]]
            [marathon.ces [core     :as core]
                          [supply   :as supply]
                          [demand   :as demand]
                          [unit     :as unit]
                          [policy   :as policy]
                          [policyio :as policyio]
                          [policyops :as policyops]
                          [sampledata :as sd]
                          [entityfactory :as ent]
                          [setup :as setup]
                          [query :as query]
             [deployment :as deployment]]
            [marathon.ces.fill [demand :as filld]]
            [marathon.data   [protocols :as generic]]
            [marathon.demand [demanddata :as dem]]
            [marathon.project [linked :as linked]
             [excel :as xl]]
            [marathon.project :as proj]
            [spork.sim     [simcontext :as sim]
                           [history :as history]]
            [spork.entitysystem.store :as store]
            [spork.util [reducers]
             [tags :as tags]
             [table :as tbl]]
            [spork.sketch :as sketch]
            [clojure.core [reducers :as r]]
            [clojure.test :as test :refer :all]
            [marathon [analysis :as analysis]
             [observers :as obs]]
            #_#_#_
            [marathon.analysis.tacmm.demo :as tacmm]
            [marathon.analysis.requirements :as req]
            [marathon.analysis.random :as random]
            [marathon.spec :as spec]
            [clojure.java.io :as java.io]
           ))

(defn reload-all []
  (require 'marathon.ces.testing.noasync :reload-all)
  (require 'marathon.ces.testing :reload))
